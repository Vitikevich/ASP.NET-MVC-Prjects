@model IPagedList<UseXPagedListMVC.Models.User>
@using X.PagedList;
@using X.PagedList.Mvc.Common;
@using X.PagedList.Mvc;

@{
    ViewBag.Title = "List";
}

<h2>@typeof(Controller).Assembly.GetName().Version.ToString()</h2>

@using (Html.BeginForm("List", "Users", null, FormMethod.Get, new { @class = "form-inline" }))
{
    <div class="form-group row">
        <div class="form-group">
            <label class="sr-only" for="exampleInputEmail3">Email address</label>
            <input class="form-control" id="exampleInputEmail3" placeholder="Search..." name="SearchString" value="@ViewBag.SearchString">
        </div>
        <button type="submit" class="btn btn-primary">Find</button>
    </div>
}
<br />
@*<p>@Html.ActionLink("Create New", "Create")</p>*@
<p>На странице: <strong>@Model.Count</strong></p>
<table class="table">
    <tr>
        <th>
            @*@Html.DisplayNameFor(model => model.FirstOrDefault().ID)*@
            @Html.ActionLink("№", "List", new { sortOrder = ViewBag.IDSortParm, searchString = ViewBag.SearchString, page = ViewBag.PageNumber })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.FirstOrDefault().Name)*@
            @Html.ActionLink("Name", "List", new { sortOrder = ViewBag.NameSortParm, searchString = ViewBag.SearchString, page = ViewBag.PageNumber })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.FirstOrDefault().SName)*@
            @Html.ActionLink("SName", "List", new { sortOrder = ViewBag.SNameSortParm, searchString = ViewBag.SearchString, page = ViewBag.PageNumber })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.FirstOrDefault().Age)*@
            @Html.ActionLink("Age", "List", new { sortOrder = ViewBag.AgeSortParm, searchString = ViewBag.SearchString, page = ViewBag.PageNumber })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.FirstOrDefault().IsStudent)*@
            @Html.ActionLink("IsStudent", "List", new { sortOrder = ViewBag.IsStudentSortParm, searchString = ViewBag.SearchString, page = ViewBag.PageNumber })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Age)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsStudent)
            </td>
            @*<td>
                    @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                    @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                    @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                </td>*@
        </tr>
    }

</table>

<p>Всего: <strong>@ViewBag.TotalCount</strong></p>

@*@Html.PagedListPager(Model, (page) => Url.Action("List", new { page = page, sortOrder = ViewBag.SortOrder, searchString = ViewBag.SearchString }), PagedListRenderOptions.OnlyShowFivePagesAtATime)*@
@Html.PagedListPager(
    Model,
    (page) => Url.Action(
        "List",
        new
        {
            page = page,
            sortOrder = ViewBag.SortOrder,
            searchString = ViewBag.SearchString
        }
    ),
    new PagedListRenderOptions
    {
        //FunctionToDisplayEachPageNumber = page => ((page - 1) * ViewBag.PageNumber + 1).ToString() + "-" + (((page - 1) * ViewBag.PageNumber) + ViewBag.PageNumber).ToString(),
        MaximumPageNumbersToDisplay = 5,
        DisplayLinkToNextPage = PagedListDisplayMode.Never,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Never,
    }
)